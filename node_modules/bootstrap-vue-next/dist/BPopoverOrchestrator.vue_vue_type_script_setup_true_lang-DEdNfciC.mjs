import { _ as _sfc_main$1 } from "./ConditionalTeleport.vue_vue_type_script_lang-BCI6afpC.mjs";
import { defineComponent, createBlock, openBlock, unref, withCtx, createElementVNode, mergeProps, createElementBlock, Fragment, renderList, resolveDynamicComponent, createSlots } from "vue";
import { u as useDefaults } from "./useDefaults-2hK8an5B.mjs";
import { usePopoverController } from "./src/composables/usePopoverController/index.mjs";
import { _ as _sfc_main$3 } from "./floatingUi-BkI6EwT8.mjs";
import { _ as _sfc_main$2 } from "./BTooltip.vue_vue_type_script_setup_true_lang-DYX8l-Iw.mjs";
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "BPopoverOrchestrator",
  props: {
    teleportDisabled: { type: Boolean, default: false },
    teleportTo: { default: "body" }
  },
  setup(__props, { expose: __expose }) {
    const tools = usePopoverController();
    tools._isOrchestratorInstalled.value = true;
    const _props = __props;
    const props = useDefaults(_props, "BPopoverOrchestrator");
    __expose({
      ...tools
    });
    return (_ctx, _cache) => {
      const _component_ConditionalTeleport = _sfc_main$1;
      return openBlock(), createBlock(_component_ConditionalTeleport, {
        to: unref(props).teleportTo,
        disabled: unref(props).teleportDisabled
      }, {
        default: withCtx(() => {
          var _a;
          return [
            createElementVNode("div", mergeProps({ id: "__BVID__popover-container" }, _ctx.$attrs), [
              (openBlock(true), createElementBlock(Fragment, null, renderList(((_a = unref(tools).popovers) == null ? void 0 : _a.value.entries()) ?? [], ([
                key,
                { component: _component, promise, slots, ...val }
              ]) => {
                return openBlock(), createBlock(resolveDynamicComponent(_component ?? (val.tooltip ? _sfc_main$2 : _sfc_main$3)), mergeProps({
                  key,
                  ref_for: true
                }, val, {
                  "initial-animation": "",
                  "teleport-disabled": true,
                  onHide: (e) => {
                    var _a2;
                    (_a2 = val.onHide) == null ? void 0 : _a2.call(val, e);
                    if (e.defaultPrevented) {
                      return;
                    }
                    promise.resolve(e);
                  }
                }), createSlots({ _: 2 }, [
                  renderList(slots, (comp, slot) => {
                    return {
                      name: slot,
                      fn: withCtx((scope) => [
                        (openBlock(), createBlock(resolveDynamicComponent(comp), mergeProps({ ref_for: true }, scope), null, 16))
                      ])
                    };
                  })
                ]), 1040, ["onHide"]);
              }), 128))
            ], 16)
          ];
        }),
        _: 1
      }, 8, ["to", "disabled"]);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=BPopoverOrchestrator.vue_vue_type_script_setup_true_lang-DEdNfciC.mjs.map
