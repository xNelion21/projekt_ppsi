{"version":3,"file":"BFormSelect.vue_vue_type_script_setup_true_lang-h0NbN5MN.js","sources":["../src/components/BFormSelect/BFormSelectOptionGroup.vue","../src/components/BFormSelect/BFormSelect.vue"],"sourcesContent":["<template>\n  <optgroup :label=\"props.label\">\n    <slot name=\"first\" />\n    <BFormSelectOption\n      v-for=\"(option, index) in normalizedOptions\"\n      :key=\"index\"\n      :disabled=\"option.disabled\"\n      :value=\"option.value\"\n      v-bind=\"$attrs\"\n    >\n      <slot name=\"option\" v-bind=\"option\">\n        {{ option.text }}\n      </slot>\n    </BFormSelectOption>\n    <slot />\n  </optgroup>\n</template>\n\n<script setup lang=\"ts\" generic=\"T\">\nimport BFormSelectOption from './BFormSelectOption.vue'\nimport {useDefaults} from '../../composables/useDefaults'\nimport type {BFormSelectOptionGroupProps} from '../../types/ComponentProps'\nimport type {ComputedRef} from 'vue'\nimport {useFormSelect} from '../../composables/useFormSelect'\nimport type {SelectOption} from '../../types/SelectTypes'\n\nconst _props = withDefaults(defineProps<BFormSelectOptionGroupProps>(), {\n  disabledField: 'disabled',\n  label: undefined,\n  options: () => [],\n  textField: 'text',\n  valueField: 'value',\n})\nconst props = useDefaults(_props, 'BFormSelectOptionGroup')\n\ndefineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default?: (props: Record<string, never>) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  first?: (props: Record<string, never>) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  option: (props: SelectOption<T>) => any\n}>()\n\nconst {normalizedOptions} = useFormSelect(() => props.options, props) as {\n  normalizedOptions: ComputedRef<SelectOption<T>[]>\n}\n</script>\n","<template>\n  <select\n    :id=\"computedId\"\n    ref=\"_input\"\n    v-model=\"localValue\"\n    :class=\"computedClasses\"\n    :name=\"props.name\"\n    :form=\"props.form || undefined\"\n    :multiple=\"props.multiple || undefined\"\n    :size=\"computedSelectSize\"\n    :disabled=\"props.disabled\"\n    :required=\"props.required || undefined\"\n    :aria-required=\"props.required || undefined\"\n    :aria-invalid=\"computedAriaInvalid\"\n  >\n    <slot name=\"first\" />\n    <template v-for=\"(option, index) in normalizedOptsWrapper\" :key=\"index\">\n      <BFormSelectOptionGroup\n        v-if=\"isComplex(option)\"\n        :label=\"option.label\"\n        :options=\"option.options\"\n        :value-field=\"props.valueField\"\n        :text-field=\"props.textField\"\n        :disabled-field=\"props.disabledField\"\n      />\n      <BFormSelectOption v-else :value=\"option.value\" :disabled=\"option.disabled\">\n        <slot name=\"option\" v-bind=\"option\">\n          {{ option.text }}\n        </slot>\n      </BFormSelectOption>\n    </template>\n    <slot />\n  </select>\n</template>\n\n<script setup lang=\"ts\" generic=\"T\">\nimport type {BFormSelectProps} from '../../types/ComponentProps'\nimport {computed, useTemplateRef} from 'vue'\nimport BFormSelectOption from './BFormSelectOption.vue'\nimport BFormSelectOptionGroup from './BFormSelectOptionGroup.vue'\nimport {useAriaInvalid} from '../../composables/useAriaInvalid'\nimport {useFocus, useToNumber} from '@vueuse/core'\nimport {useDefaults} from '../../composables/useDefaults'\nimport {useId} from '../../composables/useId'\nimport {useStateClass} from '../../composables/useStateClass'\nimport {useFormSelect} from '../../composables/useFormSelect'\nimport type {ComplexSelectOptionRaw, SelectOption} from '../../types/SelectTypes'\n\nconst _props = withDefaults(defineProps<Omit<BFormSelectProps, 'modelValue'>>(), {\n  ariaInvalid: undefined,\n  autofocus: false,\n  disabled: false,\n  disabledField: 'disabled',\n  form: undefined,\n  id: undefined,\n  labelField: 'label',\n  multiple: false,\n  name: undefined,\n  options: () => [],\n  optionsField: 'options',\n  plain: false,\n  required: false,\n  selectSize: 0,\n  size: 'md',\n  state: null,\n  textField: 'text',\n  valueField: 'value',\n})\nconst props = useDefaults(_props, 'BFormSelect')\n\ndefineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default?: (props: Record<string, never>) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  first?: (props: Record<string, never>) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  option: (props: SelectOption<T>) => any\n}>()\n\nconst modelValue = defineModel<T>({\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default: '' as any,\n})\n\nconst computedId = useId(() => props.id, 'input')\n\nconst selectSizeNumber = useToNumber(() => props.selectSize)\n\nconst stateClass = useStateClass(() => props.state)\n\nconst input = useTemplateRef<HTMLElement>('_input')\n\nconst {focused} = useFocus(input, {\n  initialValue: props.autofocus,\n})\n\nconst computedClasses = computed(() => [\n  stateClass.value,\n  {\n    'form-control': props.plain,\n    [`form-control-${props.size}`]: props.size !== 'md' && props.plain,\n    'form-select': !props.plain,\n    [`form-select-${props.size}`]: props.size !== 'md' && !props.plain,\n  },\n])\n\nconst computedSelectSize = computed(() =>\n  selectSizeNumber.value || props.plain ? selectSizeNumber.value : undefined\n)\n\nconst computedAriaInvalid = useAriaInvalid(\n  () => props.ariaInvalid,\n  () => props.state\n)\n\nconst {normalizedOptions, isComplex} = useFormSelect(() => props.options, props)\n\nconst normalizedOptsWrapper = computed(\n  () => normalizedOptions.value as readonly (ComplexSelectOptionRaw<T> | SelectOption<T>)[]\n)\n\nconst localValue = computed({\n  get: () => modelValue.value,\n  set: (newValue) => {\n    modelValue.value = newValue\n  },\n})\n\ndefineExpose({\n  blur: () => {\n    focused.value = false\n  },\n  element: input,\n  focus: () => {\n    focused.value = true\n  },\n})\n</script>\n"],"names":["_props","__props","props","useDefaults","normalizedOptions","useFormSelect","options","modelValue","_useModel","computedId","useId","id","selectSizeNumber","useToNumber","selectSize","stateClass","useStateClass","state","input","useTemplateRef","focused","useFocus","initialValue","autofocus","computedClasses","computed","value","plain","size","computedSelectSize","computedAriaInvalid","useAriaInvalid","ariaInvalid","isComplex","normalizedOptsWrapper","localValue","get","set","newValue","__expose","blur","element","focus"],"mappings":"ugBA0BA,MAAMA,EAASC,EAOTC,EAAQC,EAAAA,YAAYH,EAAQ,2BAW5BI,kBAACA,GAAqBC,EAAAA,eAAc,IAAMH,EAAMI,SAASJ,w0CCI/D,MAAMF,EAASC,EAoBTC,EAAQC,EAAAA,YAAYH,EAAQ,eAW5BO,EAAaC,EAAAA,SAGlBP,EAAA,cAEKQ,EAAaC,EAAAA,OAAM,IAAMR,EAAMS,IAAI,SAEnCC,EAAmBC,EAAAA,aAAY,IAAMX,EAAMY,aAE3CC,EAAaC,EAAAA,eAAc,IAAMd,EAAMe,QAEvCC,EAAQC,iBAA4B,WAEpCC,QAACA,GAAWC,EAAAA,SAASH,EAAO,CAChCI,aAAcpB,EAAMqB,YAGhBC,EAAkBC,EAAAA,UAAS,IAAM,CACrCV,EAAWW,MACX,CACE,eAAgBxB,EAAMyB,MACtB,CAAC,gBAAgBzB,EAAM0B,QAAwB,OAAf1B,EAAM0B,MAAiB1B,EAAMyB,MAC7D,eAAgBzB,EAAMyB,MACtB,CAAC,eAAezB,EAAM0B,QAAwB,OAAf1B,EAAM0B,OAAkB1B,EAAMyB,UAI3DE,EAAqBJ,EAAAA,UAAS,IAClCb,EAAiBc,OAASxB,EAAMyB,MAAQf,EAAiBc,WAAQ,IAG7DI,EAAsBC,EAAAA,gBAC1B,IAAM7B,EAAM8B,cACZ,IAAM9B,EAAMe,SAGRb,kBAACA,YAAmB6B,GAAa5B,iBAAc,IAAMH,EAAMI,SAASJ,GAEpEgC,EAAwBT,EAAAA,UAC5B,IAAMrB,EAAkBsB,QAGpBS,EAAaV,EAAAA,SAAS,CAC1BW,IAAK,IAAM7B,EAAWmB,MACtBW,IAAMC,IACJ/B,EAAWmB,MAAQY,CAAA,WAIVC,EAAA,CACXC,KAAM,KACJpB,EAAQM,OAAQ,CAAA,EAElBe,QAASvB,EACTwB,MAAO,KACLtB,EAAQM,OAAQ,CAAA"}