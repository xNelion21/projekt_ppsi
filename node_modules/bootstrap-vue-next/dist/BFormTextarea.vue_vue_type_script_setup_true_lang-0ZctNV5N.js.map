{"version":3,"file":"BFormTextarea.vue_vue_type_script_setup_true_lang-0ZctNV5N.js","sources":["../src/components/BFormTextarea/BFormTextarea.vue","../src/composables/useTextareaResize.ts"],"sourcesContent":["<template>\n  <textarea\n    :id=\"computedId\"\n    ref=\"_input\"\n    :key=\"forceUpdateKey\"\n    :class=\"computedClasses\"\n    :name=\"props.name || undefined\"\n    :form=\"props.form || undefined\"\n    :value=\"modelValue ?? undefined\"\n    :disabled=\"props.disabled\"\n    :placeholder=\"props.placeholder\"\n    :required=\"props.required || undefined\"\n    :autocomplete=\"props.autocomplete || undefined\"\n    :readonly=\"props.readonly || props.plaintext\"\n    :aria-required=\"props.required || undefined\"\n    :aria-invalid=\"computedAriaInvalid\"\n    :rows=\"computedRows || 2\"\n    :style=\"computedStyles\"\n    :wrap=\"props.wrap || undefined\"\n    @input=\"\n      (e) => {\n        onInput(e)\n        handleHeightChange()\n      }\n    \"\n    @change=\"onChange\"\n    @blur=\"onBlur\"\n  />\n</template>\n\n<script setup lang=\"ts\">\nimport type {BFormTextareaProps} from '../../types/ComponentProps'\nimport {computed, type CSSProperties, useTemplateRef} from 'vue'\nimport {useDefaults} from '../../composables/useDefaults'\nimport {normalizeInput} from '../../utils/normalizeInput'\nimport {useFormInput} from '../../composables/useFormInput'\nimport {useTextareaResize} from '../../composables/useTextareaResize'\n\nconst _props = withDefaults(defineProps<Omit<BFormTextareaProps, 'modelValue'>>(), {\n  // CommonInputProps\n  ariaInvalid: undefined,\n  autocomplete: undefined,\n  autofocus: false,\n  debounce: 0,\n  debounceMaxWait: NaN,\n  disabled: false,\n  form: undefined,\n  formatter: undefined,\n  id: undefined,\n  lazyFormatter: false,\n  list: undefined,\n  modelValue: '',\n  name: undefined,\n  placeholder: undefined,\n  plaintext: false,\n  readonly: false,\n  required: false,\n  size: undefined,\n  state: undefined,\n  // End CommonInputProps\n  noResize: false,\n  noAutoShrink: false,\n  maxRows: undefined,\n  rows: 2,\n  wrap: 'soft',\n})\nconst props = useDefaults(_props, 'BFormTextarea')\n\nconst [modelValue, modelModifiers] = defineModel<\n  Exclude<BFormTextareaProps['modelValue'], undefined>,\n  'trim' | 'lazy' | 'number'\n>({\n  default: '',\n  set: (v) => normalizeInput(v, modelModifiers),\n})\n\nconst input = useTemplateRef<HTMLTextAreaElement>('_input')\n\nconst {\n  computedId,\n  forceUpdateKey,\n  computedAriaInvalid,\n  onInput,\n  stateClass,\n  onChange,\n  onBlur,\n  focus,\n  blur,\n} = useFormInput(props, input, modelValue, modelModifiers)\n\nconst computedClasses = computed(() => [\n  stateClass.value,\n  props.plaintext ? 'form-control-plaintext' : 'form-control',\n  {\n    [`form-control-${props.size}`]: !!props.size,\n  },\n])\n\nconst {\n  computedStyles: resizeStyles,\n  onInput: handleHeightChange,\n  computedRows,\n} = useTextareaResize(input, {\n  maxRows: () => props.maxRows,\n  rows: () => props.rows,\n  noAutoShrink: () => props.noAutoShrink,\n})\n\nconst computedStyles = computed<CSSProperties>(() => ({\n  resize: props.noResize ? 'none' : undefined,\n  ...(props.maxRows || props.noAutoShrink ? resizeStyles.value : undefined),\n}))\n\ndefineExpose({\n  blur,\n  element: input,\n  focus,\n})\n</script>\n","import {useToNumber} from '@vueuse/core'\nimport type {Numberish} from '../types/CommonTypes'\nimport {\n  computed,\n  type CSSProperties,\n  type MaybeRefOrGetter,\n  nextTick,\n  onMounted,\n  ref,\n  type ShallowRef,\n  toValue,\n} from 'vue'\nimport {isVisible} from '../utils/dom'\n\nexport const useTextareaResize = (\n  input: Readonly<ShallowRef<HTMLTextAreaElement | null>>,\n  {\n    maxRows,\n    noAutoShrink,\n    rows,\n  }: {\n    rows: MaybeRefOrGetter<Numberish>\n    maxRows: MaybeRefOrGetter<Numberish | undefined>\n    noAutoShrink: MaybeRefOrGetter<boolean>\n  }\n) => {\n  const height = ref<number | null | string>(0)\n  const maxRowsNumber = useToNumber(\n    computed(() => toValue(maxRows) || NaN),\n    {\n      method: 'parseInt',\n      nanToZero: true,\n    }\n  )\n  const rowsNumber = useToNumber(rows, {\n    method: 'parseInt',\n    nanToZero: true,\n  })\n  const computedMinRows = computed(() => Math.max(rowsNumber.value || 2, 2))\n  const computedMaxRows = computed(() => Math.max(computedMinRows.value, maxRowsNumber.value || 0))\n  const computedRows = computed(() =>\n    computedMinRows.value === computedMaxRows.value ? computedMinRows.value : null\n  )\n\n  const handleHeightChange = async () => {\n    // Element must be visible (not hidden) and in document\n    // Must be checked after above checks\n    if (!input.value || !isVisible(input.value)) {\n      height.value = null\n      return\n    }\n\n    // Get current computed styles\n    const computedStyle = getComputedStyle(input.value)\n    // Height of one line of text in px\n    const lineHeight = Number.parseFloat(computedStyle.lineHeight) || 1\n    // Calculate height of border and padding\n    const border =\n      (Number.parseFloat(computedStyle.borderTopWidth) || 0) +\n      (Number.parseFloat(computedStyle.borderBottomWidth) || 0)\n    const padding =\n      (Number.parseFloat(computedStyle.paddingTop) || 0) +\n      (Number.parseFloat(computedStyle.paddingBottom) || 0)\n    // Calculate offset\n    const offset = border + padding\n    // Minimum height for min rows (which must be 2 rows or greater for cross-browser support)\n    const minHeight = lineHeight * computedMinRows.value + offset\n\n    // Get the current style height (with `px` units)\n    const oldHeight = input.value.style.height || computedStyle.height\n    // Probe scrollHeight by temporarily changing the height to `auto`\n    height.value = 'auto'\n    await nextTick() // We need to wait for the dom to update. These cannot be batched in the same tick\n    const {scrollHeight} = input.value\n    // Place the original old height back on the element, just in case `computedProp`\n    // returns the same value as before\n    height.value = oldHeight\n    await nextTick() // We need to wait for the dom to update. These cannot be batched in the same tick\n\n    // Calculate content height in 'rows' (scrollHeight includes padding but not border)\n    const contentRows = Math.max((scrollHeight - padding) / lineHeight, 2)\n    // Calculate number of rows to display (limited within min/max rows)\n    const rows = Math.min(Math.max(contentRows, computedMinRows.value), computedMaxRows.value)\n    // Calculate the required height of the textarea including border and padding (in pixels)\n    const newHeight = Math.max(Math.ceil(rows * lineHeight + offset), minHeight)\n\n    // Computed height remains the larger of `oldHeight` and new `height`,\n    // when height is in `sticky` mode (prop `no-auto-shrink` is true)\n    if (toValue(noAutoShrink) && (Number.parseFloat(oldHeight.toString()) || 0) > newHeight) {\n      height.value = oldHeight\n      return\n    }\n\n    // Return the new computed CSS height in px units\n    height.value = `${newHeight}px`\n  }\n\n  onMounted(handleHeightChange)\n\n  const computedStyles = computed<CSSProperties>(() => ({\n    resize: 'none',\n    height:\n      typeof height.value === 'string'\n        ? height.value\n        : height.value\n          ? `${height.value}px`\n          : undefined,\n  }))\n\n  return {\n    onInput: handleHeightChange,\n    computedStyles,\n    computedRows,\n  }\n}\n"],"names":["_props","__props","props","useDefaults","modelValue","modelModifiers","_useModel","set","v","normalizeInput","input","useTemplateRef","computedId","forceUpdateKey","computedAriaInvalid","onInput","stateClass","onChange","onBlur","focus","blur","useFormInput","computedClasses","computed","value","plaintext","size","computedStyles","resizeStyles","handleHeightChange","computedRows","maxRows","noAutoShrink","rows","height","ref","maxRowsNumber","useToNumber","toValue","NaN","method","nanToZero","rowsNumber","computedMinRows","Math","max","computedMaxRows","async","isVisible","computedStyle","getComputedStyle","lineHeight","Number","parseFloat","border","borderTopWidth","borderBottomWidth","padding","paddingTop","paddingBottom","offset","minHeight","oldHeight","style","nextTick","scrollHeight","contentRows","min","newHeight","ceil","toString","onMounted","resize","useTextareaResize","noResize","__expose","element"],"mappings":"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"}