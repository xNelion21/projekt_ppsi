{"version":3,"file":"BToastOrchestrator.vue_vue_type_style_index_0_lang-DnJNQgDd.js","sources":["../src/components/BToast/BToast.vue","../src/utils/positionClasses.ts","../src/components/BToast/BToastOrchestrator.vue"],"sourcesContent":["<template>\n  <Transition\n    v-if=\"renderRef || contentShowing\"\n    v-bind=\"transitionProps\"\n    :appear=\"!!modelValue || props.visible\"\n  >\n    <div\n      v-show=\"isToastVisible\"\n      :id=\"props.id\"\n      ref=\"_element\"\n      class=\"toast\"\n      :class=\"[props.toastClass, computedClasses]\"\n      tabindex=\"0\"\n      style=\"display: block\"\n      :role=\"!isToastVisible ? undefined : props.isStatus ? 'status' : 'alert'\"\n      :aria-live=\"!isToastVisible ? undefined : props.isStatus ? 'polite' : 'assertive'\"\n      :aria-atomic=\"!isToastVisible ? undefined : true\"\n    >\n      <component\n        :is=\"props.headerTag\"\n        v-if=\"contentShowing && (slots.title || props.title)\"\n        class=\"toast-header\"\n        :class=\"props.headerClass\"\n      >\n        <slot name=\"title\" v-bind=\"sharedSlots\">\n          <strong>\n            {{ props.title }}\n          </strong>\n        </slot>\n        <template v-if=\"!props.noCloseButton\">\n          <BButton\n            v-if=\"slots.close || props.closeContent\"\n            :class=\"[props.closeClass]\"\n            class=\"ms-auto\"\n            :variant=\"props.closeVariant\"\n            @click.stop.prevent=\"hide('close')\"\n          >\n            <slot name=\"close\" v-bind=\"sharedSlots\">\n              {{ props.closeContent }}\n            </slot>\n          </BButton>\n          <BCloseButton\n            v-else\n            :aria-label=\"props.closeLabel\"\n            class=\"ms-auto\"\n            :class=\"[props.closeClass]\"\n            @click.stop.prevent=\"hide('close')\"\n          />\n        </template>\n        <!-- <BCloseButton  class=\"ms-auto\" @click=\"hide('close')\" /> -->\n      </component>\n      <template v-if=\"contentShowing && (slots.default || props.body)\">\n        <div class=\"d-flex\">\n          <component\n            :is=\"computedTag\"\n            class=\"toast-body\"\n            :class=\"props.bodyClass\"\n            v-bind=\"computedLinkProps\"\n            @click=\"computedLink ? hide() : () => {}\"\n          >\n            <slot v-bind=\"sharedSlots\">\n              {{ props.body }}\n            </slot>\n          </component>\n\n          <template v-if=\"!props.noCloseButton && !(slots.title || props.title)\">\n            <BButton\n              v-if=\"slots.close || props.closeContent\"\n              :class=\"[props.closeClass]\"\n              class=\"ms-auto btn-close-custom\"\n              :variant=\"props.closeVariant\"\n              @click.stop.prevent=\"hide('close')\"\n            >\n              <slot name=\"close\" v-bind=\"sharedSlots\">\n                {{ props.closeContent }}\n              </slot>\n            </BButton>\n            <BCloseButton\n              v-else\n              :aria-label=\"props.closeLabel\"\n              class=\"ms-auto btn-close-custom\"\n              :class=\"[props.closeClass]\"\n              @click.stop.prevent=\"hide('close')\"\n            />\n          </template>\n        </div>\n      </template>\n      <BProgress\n        v-if=\"typeof modelValue === 'number' && props.progressProps !== undefined\"\n        :animated=\"props.progressProps.animated\"\n        :precision=\"props.progressProps.precision\"\n        :show-progress=\"props.progressProps.showProgress\"\n        :show-value=\"props.progressProps.showValue\"\n        :striped=\"props.progressProps.striped\"\n        :variant=\"props.progressProps.variant\"\n        :max=\"modelValue\"\n        :value=\"remainingMs\"\n        height=\"4px\"\n      />\n    </div>\n  </Transition>\n</template>\n\n<script setup lang=\"ts\">\nimport {computed, type EmitFn, useTemplateRef, watch, watchEffect} from 'vue'\nimport {useBLinkHelper} from '../../composables/useBLinkHelper'\nimport type {BToastProps} from '../../types/ComponentProps'\nimport type {BToastEmits} from '../../types/ComponentEmits'\nimport type {BToastSlots, ShowHideSlotsData} from '../../types/ComponentSlots'\nimport BCloseButton from '../BButton/BCloseButton.vue'\nimport BLink from '../BLink/BLink.vue'\nimport BProgress from '../BProgress/BProgress.vue'\nimport {useCountdown} from '../../composables/useCountdown'\nimport {useColorVariantClasses} from '../../composables/useColorVariantClasses'\nimport {useDefaults} from '../../composables/useDefaults'\nimport {useCountdownHover} from '../../composables/useCountdownHover'\nimport {useId} from '../../composables/useId'\nimport {useShowHide} from '../../composables/useShowHide'\n\nconst _props = withDefaults(defineProps<Omit<BToastProps, 'modelValue'>>(), {\n  bgVariant: null,\n  body: undefined,\n  bodyClass: undefined,\n  closeClass: undefined,\n  closeContent: undefined,\n  closeLabel: 'Close',\n  closeVariant: 'secondary',\n  headerClass: undefined,\n  headerTag: 'div',\n  id: undefined,\n  initialAnimation: false,\n  interval: 'requestAnimationFrame',\n  isStatus: false,\n  lazy: false,\n  noCloseButton: false,\n  noFade: false,\n  noHoverPause: false,\n  noResumeOnHoverLeave: false,\n  progressProps: undefined,\n  unmountLazy: false,\n  showOnPause: true,\n  show: false,\n  solid: false,\n  textVariant: null,\n  title: undefined,\n  toastClass: undefined,\n  transProps: undefined,\n  visible: false,\n  // Link props\n  // All others use defaults\n  noRel: undefined,\n  active: undefined,\n  activeClass: undefined,\n  disabled: undefined,\n  exactActiveClass: undefined,\n  href: undefined,\n  icon: undefined,\n  opacity: undefined,\n  opacityHover: undefined,\n  stretched: false,\n  rel: undefined,\n  replace: undefined,\n  routerComponentName: undefined,\n  target: undefined,\n  to: undefined,\n  underlineOffset: undefined,\n  underlineOffsetHover: undefined,\n  underlineOpacity: undefined,\n  underlineOpacityHover: undefined,\n  underlineVariant: undefined,\n  variant: undefined,\n  // End link props\n})\nconst props = useDefaults(_props, 'BToast')\n\nconst emit = defineEmits<BToastEmits>()\n\nconst slots = defineSlots<BToastSlots>()\n\nconst element = useTemplateRef<HTMLElement>('_element')\n\nconst modelValue = defineModel<Exclude<BToastProps['modelValue'], undefined>>({default: false})\nconst {computedLink, computedLinkProps} = useBLinkHelper(props)\n\nconst computedId = useId(() => props.id, 'toast')\n\nconst {\n  showRef,\n  renderRef,\n  hide,\n  toggle,\n  show,\n  buildTriggerableEvent,\n  computedNoAnimation,\n  isVisible,\n  transitionProps,\n  contentShowing,\n} = useShowHide(modelValue, props, emit as EmitFn, element, computedId)\n\n// TODO solid is never used\nconst countdownLength = computed(() =>\n  typeof modelValue.value === 'boolean' ? 0 : modelValue.value\n)\n\nconst {\n  isActive,\n  pause,\n  restart,\n  resume,\n  stop,\n  isPaused,\n  value: remainingMs,\n} = useCountdown(countdownLength, props.interval, {\n  immediate: typeof modelValue.value === 'number' && !!modelValue.value,\n})\nuseCountdownHover(\n  element,\n  computed(() => ({\n    noHoverPause: props.noHoverPause || typeof modelValue.value !== 'number',\n    noResumeOnHoverLeave: props.noResumeOnHoverLeave || typeof modelValue.value !== 'number',\n    modelValueIgnoresHover: typeof modelValue.value === 'boolean',\n  })),\n  {pause, resume}\n)\n\nwatchEffect(() => {\n  emit('close-countdown', remainingMs.value)\n})\n\nconst computedTag = computed(() => (computedLink.value ? BLink : 'div'))\n\nconst isToastVisible = computed(\n  () => showRef.value || isActive.value || (props.showOnPause && isPaused.value)\n)\n\nconst colorClasses = useColorVariantClasses(props)\nconst computedClasses = computed(() => [\n  colorClasses.value,\n  {\n    show: isVisible.value,\n    fade: !computedNoAnimation.value,\n  },\n])\n\nwatch(modelValue, (newValue) => {\n  if (typeof newValue === 'number') {\n    const event = buildTriggerableEvent('show', {cancelable: true, trigger: 'model'})\n    emit('show', event)\n    if (event.defaultPrevented) {\n      emit('show-prevented', buildTriggerableEvent('show-prevented'))\n    } else {\n      restart()\n    }\n  }\n})\n\n// isActive in the composable will cause the toast to hide when the countdown is done\nwatch(isActive, (newValue) => {\n  if (newValue === false && isPaused.value === false) {\n    hide()\n    modelValue.value = 0\n    stop()\n  }\n})\nconst sharedSlots = computed<ShowHideSlotsData>(() => ({\n  toggle,\n  show,\n  hide,\n  id: computedId.value,\n  visible: showRef.value,\n  active: isActive.value,\n}))\n\ndefineExpose({\n  show,\n  hide,\n  toggle,\n  pause,\n  restart,\n  resume,\n  stop,\n})\n</script>\n\n<style lang=\"scss\" scoped>\n.toast :deep(.progress .progress-bar) {\n  --bs-progress-bar-transition: none;\n}\n.toast:not(.show) {\n  opacity: unset;\n}\n.toast.fade:not(.show) {\n  opacity: 0;\n}\n.btn-close-custom {\n  margin: var(--bs-toast-padding-x) var(--bs-toast-padding-x) auto;\n}\n</style>\n","import type {ContainerPosition} from '../types/Alignment'\n\nexport const positionClasses = {\n  'top-start': 'top-0 start-0',\n  'top-center': 'top-0 start-50 translate-middle-x',\n  'top-end': 'top-0 end-0',\n  'middle-start': 'top-50 start-0 translate-middle-y',\n  'middle-center': 'top-50 start-50 translate-middle',\n  'middle-end': 'top-50 end-0 translate-middle-y',\n  'bottom-start': 'bottom-0 start-0',\n  'bottom-center': 'bottom-0 start-50 translate-middle-x',\n  'bottom-end': 'bottom-0 end-0',\n} as const satisfies Record<ContainerPosition, string>\n","<template>\n  <ConditionalTeleport :to=\"props.teleportTo\" :disabled=\"props.teleportDisabled\">\n    <div id=\"__BVID__toaster-container\" v-bind=\"$attrs\">\n      <div\n        v-for=\"(value, key) in positionClasses\"\n        :key\n        :class=\"value\"\n        class=\"toast-container position-fixed p-3\"\n        style=\"width: calc(var(--bs-toast-max-width, 350px) + 2 * 1rem)\"\n      >\n        <TransitionGroup name=\"b-list\">\n          <span\n            v-for=\"{\n              _self,\n              slots,\n              promise,\n              options,\n              component: _component,\n              ...val\n            } in tools.toasts?.value.filter((el) => el.position === key) || []\"\n            :key=\"_self\"\n          >\n            <component\n              :is=\"_component ?? BToast\"\n              v-bind=\"val\"\n              :ref=\"(ref: ComponentPublicInstance) => (promise.value.ref = ref)\"\n              initial-animation\n              :teleport-disabled=\"true\"\n              @hide=\"\n                (e: BvTriggerableEvent) => {\n                  // we resolve close button to false, true otherwise for example link\n                  e.ok = e.trigger !== 'close'\n\n                  val.onHide?.(e)\n                  if (e.defaultPrevented) {\n                    return\n                  }\n                  promise.stop?.()\n                  if (options?.resolveOnHide) {\n                    promise.resolve(e)\n                  }\n                }\n              \"\n              @hidden=\"\n                (e: BvTriggerableEvent) => {\n                  e.ok = e.trigger !== 'close'\n                  val.onHidden?.(e)\n                  if (e.defaultPrevented) {\n                    return\n                  }\n                  if (!options?.resolveOnHide) {\n                    promise.resolve(e)\n                  }\n                  if (!options?.keep) {\n                    promise.value.destroy?.()\n                  }\n                }\n              \"\n            >\n              <template v-for=\"(comp, slot) in slots\" #[slot]=\"scope\" :key=\"slot\">\n                <component :is=\"comp\" v-bind=\"scope\" />\n              </template>\n            </component>\n          </span>\n        </TransitionGroup>\n      </div>\n    </div>\n  </ConditionalTeleport>\n</template>\n\n<script setup lang=\"ts\">\nimport type {BvTriggerableEvent} from '../../utils'\n\nimport {type ComponentPublicInstance, watch} from 'vue'\nimport {useDefaults} from '../../composables/useDefaults'\nimport {positionClasses} from '../../utils/positionClasses'\nimport type {BToastOrchestratorProps} from '../../types/ComponentProps'\nimport BToast from './BToast.vue'\nimport ConditionalTeleport from '../ConditionalTeleport.vue'\nimport {useToastController} from '../../composables/useToastController'\n\ndefineOptions({\n  inheritAttrs: false,\n})\n\nconst _props = withDefaults(defineProps<BToastOrchestratorProps>(), {\n  teleportDisabled: false,\n  teleportTo: 'body',\n  appendToast: false,\n})\nconst props = useDefaults(_props, 'BToastOrchestrator')\n\nconst tools = useToastController()\ntools._isOrchestratorInstalled.value = true\n\nwatch(\n  () => props.appendToast,\n  (value) => {\n    tools._isAppend.value = value\n  },\n  {immediate: true}\n)\n\ndefineExpose({\n  ...tools,\n})\n</script>\n\n<style lang=\"scss\">\n.b-list-move,\n.b-list-enter-active,\n.b-list-leave-active {\n  transition: all 0.5s cubic-bezier(0.55, 0, 0.1, 1);\n}\n.b-list-enter-from,\n.b-list-leave-to {\n  opacity: 0; // TODO this should be the responsibility of the child\n}\n.b-list-leave-active {\n  position: fixed;\n}\n</style>\n"],"names":["_props","__props","props","useDefaults","emit","__emit","slots","_useSlots","element","useTemplateRef","modelValue","_useModel","computedLink","computedLinkProps","useBLinkHelper","computedId","useId","id","showRef","renderRef","hide","toggle","show","buildTriggerableEvent","computedNoAnimation","isVisible","transitionProps","contentShowing","useShowHide","countdownLength","computed","value","isActive","pause","restart","resume","stop","isPaused","remainingMs","useCountdown","interval","immediate","useCountdownHover","noHoverPause","noResumeOnHoverLeave","modelValueIgnoresHover","watchEffect","computedTag","BLink","isToastVisible","showOnPause","colorClasses","useColorVariantClasses","computedClasses","fade","newValue","event","cancelable","trigger","defaultPrevented","sharedSlots","visible","active","__expose","positionClasses","tools","useToastController","_isOrchestratorInstalled","vue","watch","appendToast","_isAppend"],"mappings":"mtFAuHA,MAAMA,EAASC,EAsDTC,EAAQC,EAAAA,YAAYH,EAAQ,UAE5BI,EAAOC,EAEPC,EAAQC,EAAAA,WAERC,EAAUC,iBAA4B,YAEtCC,EAAaC,EAAAA,SAA2EV,EAAA,eACxFW,aAACA,EAAcC,kBAAAA,GAAqBC,EAAAA,eAAeZ,GAEnDa,EAAaC,EAAAA,OAAM,IAAMd,EAAMe,IAAI,UAEnCC,QACJA,EAAAC,UACAA,EAAAC,KACAA,EAAAC,OACAA,EAAAC,KACAA,EAAAC,sBACAA,EAAAC,oBACAA,EAAAC,UACAA,EAAAC,gBACAA,EAAAC,eACAA,GACEC,EAAAA,YAAYlB,EAAYR,EAAOE,EAAgBI,EAASO,GAGtDc,EAAkBC,EAAAA,UAAS,IACH,kBAArBpB,EAAWqB,MAAsB,EAAIrB,EAAWqB,SAGnDC,SACJA,EAAAC,MACAA,EAAAC,QACAA,EAAAC,OACAA,EAAAC,KACAA,EAAAC,SACAA,EACAN,MAAOO,GACLC,eAAaV,EAAiB3B,EAAMsC,SAAU,CAChDC,UAAuC,iBAArB/B,EAAWqB,SAAwBrB,EAAWqB,QAElEW,EAAAA,kBACElC,EACAsB,EAAAA,UAAS,KAAO,CACda,aAAczC,EAAMyC,cAA4C,iBAArBjC,EAAWqB,MACtDa,qBAAsB1C,EAAM0C,sBAAoD,iBAArBlC,EAAWqB,MACtEc,uBAAoD,kBAArBnC,EAAWqB,UAE5C,CAACE,QAAOE,WAGVW,EAAAA,aAAY,KACL1C,EAAA,kBAAmBkC,EAAYP,MAAK,IAGrC,MAAAgB,EAAcjB,EAAAA,UAAS,IAAOlB,EAAamB,MAAQiB,YAAQ,QAE3DC,EAAiBnB,EAAAA,UACrB,IAAMZ,EAAQa,OAASC,EAASD,OAAU7B,EAAMgD,aAAeb,EAASN,QAGpEoB,EAAeC,yBAAuBlD,GACtCmD,EAAkBvB,EAAAA,UAAS,IAAM,CACrCqB,EAAapB,MACb,CACET,KAAMG,EAAUM,MAChBuB,MAAO9B,EAAoBO,kBAIzBrB,GAAa6C,IACb,GAAoB,iBAAbA,EAAuB,CAC1B,MAAAC,EAAQjC,EAAsB,OAAQ,CAACkC,YAAY,EAAMC,QAAS,UACxEtD,EAAK,OAAQoD,GACTA,EAAMG,iBACHvD,EAAA,iBAAkBmB,EAAsB,mBAErCW,GACV,aAKEF,GAAWuB,KACE,IAAbA,IAAyC,IAAnBlB,EAASN,QAC5BX,IACLV,EAAWqB,MAAQ,EACdK,IAAA,IAGH,MAAAwB,EAAc9B,EAAAA,UAA4B,KAAO,CACrDT,SACAC,OACAF,OACAH,GAAIF,EAAWgB,MACf8B,QAAS3C,EAAQa,MACjB+B,OAAQ9B,EAASD,iBAGNgC,EAAA,CACXzC,OACAF,OACAC,SACAY,QACAC,UACAC,SACAC,0yHCtRW4B,EAAkB,CAC7B,YAAa,gBACb,aAAc,oCACd,UAAW,cACX,eAAgB,oCAChB,gBAAiB,mCACjB,aAAc,kCACd,eAAgB,mBAChB,gBAAiB,uCACjB,aAAc,4NC0EhB,MAAMhE,EAASC,EAKTC,EAAQC,EAAAA,YAAYH,EAAQ,sBAE5BiE,EAAQC,EAAAA,4BACdD,EAAME,yBAAyBpC,OAAQ,EAEvCqC,EAAAC,OACE,IAAMnE,EAAMoE,cACXvC,IACCkC,EAAMM,UAAUxC,MAAQA,CAAA,GAE1B,CAACU,WAAW,IAGDsB,EAAA,IACRE"}