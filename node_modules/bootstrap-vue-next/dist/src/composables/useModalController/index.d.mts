import { ComponentInternalInstance } from 'vue';
import { ControllerKey, PromiseWithModal, PromiseWithModalBoolean } from '../../types/ComponentOrchestratorTypes';
export declare const useModalController: () => {
    modals: import('vue').Ref<Map<ControllerKey, import('../..').ModalOrchestratorMapValue>>;
    _isOrchestratorInstalled: import('vue').Ref<boolean>;
    create: (obj: import('../..').OrchestratedModal, options?: import('../..').ModalOrchestratorCreateOptions) => PromiseWithModal | PromiseWithModalBoolean;
    show: (obj: import('../..').OrchestratedModal) => PromiseWithModalBoolean;
    confirm: (obj: import('../..').OrchestratedModal) => PromiseWithModalBoolean;
    hide: (trigger?: string, id?: ControllerKey) => void;
    hideAll: (trigger?: string) => void;
    get: (id: ControllerKey) => {
        modal: import('../..').ModalOrchestratorMapValue | undefined;
        show(): void;
        hide(trigger?: string): void;
    } | {
        modal: ComponentInternalInstance;
        show(): void;
        hide(trigger?: string): void;
    } | null;
    current: () => {
        show(): void;
        hide(trigger?: string): void;
        modal: import('vue').ComputedRef<import('vue').ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import('vue').ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}, {}, {}, string, import('vue').ComponentProvideOptions>, {}, {}, "", {}, any> | null | undefined>;
    } | null;
};
