{"version":3,"file":"index.umd.js","sources":["../../../../src/composables/useBreadcrumb/index.ts"],"sourcesContent":["import {computed, inject, type MaybeRefOrGetter, toValue, watch} from 'vue'\nimport {breadcrumbGlobalIndexKey, breadcrumbPluginKey} from '../../utils/keys'\n\nexport const useBreadcrumb = (\n  /**\n   * When set it will utilize a separate instance of breadcrumb\n   */\n  id: MaybeRefOrGetter<string | null> = breadcrumbGlobalIndexKey\n) => {\n  const parentData = inject(breadcrumbPluginKey)\n\n  const resolvedId = computed(() => {\n    const v = toValue(id)\n    if (!v) return breadcrumbGlobalIndexKey\n    return v\n  })\n\n  watch(\n    resolvedId,\n    (newValue) => {\n      if (!newValue || !parentData) return\n      parentData.items.value = {\n        ...parentData.items.value,\n        [newValue]: parentData.items.value[newValue] || [],\n      }\n    },\n    {immediate: true}\n  )\n\n  const items = computed({\n    get: () => parentData?.items.value[resolvedId.value] || [],\n    set(value) {\n      if (!parentData) return\n      parentData.items.value[resolvedId.value] = value\n    },\n  })\n\n  return {\n    items,\n    reset() {\n      if (!parentData) return\n      parentData.reset(resolvedId.value || undefined)\n    },\n  }\n}\n"],"names":["id","breadcrumbGlobalIndexKey","parentData","inject","breadcrumbPluginKey","resolvedId","computed","v","toValue","vue","watch","newValue","items","value","immediate","get","set","reset"],"mappings":"oKAG6B,CAI3BA,EAAsCC,8BAEhC,MAAAC,EAAaC,SAAOC,uBAEpBC,EAAaC,EAAAA,UAAS,KACpB,MAAAC,EAAIC,UAAQR,GACd,OAACO,GAAUN,EAAAA,wBACR,IAGTQ,EAAAC,MACEL,GACCM,IACMA,GAAaT,IAClBA,EAAWU,MAAMC,MAAQ,IACpBX,EAAWU,MAAMC,MACpBF,CAACA,GAAWT,EAAWU,MAAMC,MAAMF,IAAa,IAClD,GAEF,CAACG,WAAW,IAWP,MAAA,CACLF,MATYN,EAAAA,SAAS,CACrBS,IAAK,KAAM,MAAAb,OAAA,EAAAA,EAAYU,MAAMC,MAAMR,EAAWQ,SAAU,GACxD,GAAAG,CAAIH,GACGX,IACLA,EAAWU,MAAMC,MAAMR,EAAWQ,OAASA,EAAA,IAM7C,KAAAI,GACOf,GACMA,EAAAe,MAAMZ,EAAWQ,YAAS,EAAS,EAElD"}