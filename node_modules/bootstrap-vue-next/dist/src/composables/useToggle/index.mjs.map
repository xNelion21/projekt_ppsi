{"version":3,"file":"index.mjs","sources":["../../../../src/composables/useToggle/index.ts"],"sourcesContent":["import {\n  type ComponentInternalInstance,\n  computed,\n  getCurrentInstance,\n  inject,\n  type MaybeRefOrGetter,\n  ref,\n  toValue,\n} from 'vue'\n\nimport {globalShowHideStorageInjectionKey} from '../../utils/keys'\n\nexport const useToggle = (id: MaybeRefOrGetter<string | undefined> = undefined) => {\n  const instance = getCurrentInstance()\n  const {values: registry} = inject(globalShowHideStorageInjectionKey, {\n    register: () => ({unregister: () => {}}),\n    values: ref(new Map()),\n  })\n\n  if (!registry) {\n    throw new Error(\n      'useToggle() was called outside of the setup() function or the plugin is not provided.'\n    )\n  }\n  // const registry = toRef(() => appRegistry.value)\n  const findComponent = (\n    component: ComponentInternalInstance\n  ): ComponentInternalInstance | null => {\n    if (!component.parent) {\n      return null\n    }\n\n    if (\n      component.parent.exposed?.['id'] &&\n      registry.value.get(toValue(component.parent.exposed.id))\n    ) {\n      return component.parent\n    }\n\n    return findComponent(component.parent)\n  }\n\n  const myComponent = computed(() => {\n    const resolvedId = toValue(id)\n\n    if (!registry) return null\n    if (resolvedId) {\n      const value = registry.value.get(resolvedId)\n      return toValue(value) || null\n    }\n\n    if (!instance) {\n      return null\n    }\n\n    const component = findComponent(instance)\n    return toValue(registry.value.get(toValue(component?.exposed?.id))) || null\n  })\n\n  return {\n    value: computed(() => myComponent.value?.value),\n    show: (resolveOnHide?: boolean) =>\n      myComponent.value?.show(resolveOnHide) || Promise.reject('not found'),\n    hide: (trigger?: string) =>\n      myComponent.value?.hide(trigger, true) || Promise.reject('not found'),\n    toggle: (resolveOnHide?: boolean) =>\n      myComponent.value?.toggle(resolveOnHide) || Promise.reject('not found'),\n    component: computed(() => myComponent.value?.component),\n  }\n}\n"],"names":[],"mappings":";;AAYa,MAAA,YAAY,CAAC,KAA2C,WAAc;AACjF,QAAM,WAAW,mBAAmB;AACpC,QAAM,EAAC,QAAQ,aAAY,OAAO,mCAAmC;AAAA,IACnE,UAAU,OAAO,EAAC,YAAY,MAAM;AAAA,IAAA;IACpC,QAAQ,IAAQ,oBAAA,IAAK,CAAA;AAAA,EAAA,CACtB;AAED,MAAI,CAAC,UAAU;AACb,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EAAA;AAGI,QAAA,gBAAgB,CACpB,cACqC;;AACjC,QAAA,CAAC,UAAU,QAAQ;AACd,aAAA;AAAA,IAAA;AAGT,UACE,eAAU,OAAO,YAAjB,mBAA2B,UAC3B,SAAS,MAAM,IAAI,QAAQ,UAAU,OAAO,QAAQ,EAAE,CAAC,GACvD;AACA,aAAO,UAAU;AAAA,IAAA;AAGZ,WAAA,cAAc,UAAU,MAAM;AAAA,EACvC;AAEM,QAAA,cAAc,SAAS,MAAM;;AAC3B,UAAA,aAAa,QAAQ,EAAE;AAEzB,QAAA,CAAC,SAAiB,QAAA;AACtB,QAAI,YAAY;AACd,YAAM,QAAQ,SAAS,MAAM,IAAI,UAAU;AACpC,aAAA,QAAQ,KAAK,KAAK;AAAA,IAAA;AAG3B,QAAI,CAAC,UAAU;AACN,aAAA;AAAA,IAAA;AAGH,UAAA,YAAY,cAAc,QAAQ;AACjC,WAAA,QAAQ,SAAS,MAAM,IAAI,SAAQ,4CAAW,YAAX,mBAAoB,EAAE,CAAC,CAAC,KAAK;AAAA,EAAA,CACxE;AAEM,SAAA;AAAA,IACL,OAAO,SAAS,MAAA;;AAAM,+BAAY,UAAZ,mBAAmB;AAAA,KAAK;AAAA,IAC9C,MAAM,CAAC,kBACL;;AAAA,gCAAY,UAAZ,mBAAmB,KAAK,mBAAkB,QAAQ,OAAO,WAAW;AAAA;AAAA,IACtE,MAAM,CAAC;;AACL,gCAAY,UAAZ,mBAAmB,KAAK,SAAS,UAAS,QAAQ,OAAO,WAAW;AAAA;AAAA,IACtE,QAAQ,CAAC,kBACP;;AAAA,gCAAY,UAAZ,mBAAmB,OAAO,mBAAkB,QAAQ,OAAO,WAAW;AAAA;AAAA,IACxE,WAAW,SAAS;;AAAM,+BAAY,UAAZ,mBAAmB;AAAA,KAAS;AAAA,EACxD;AACF;"}