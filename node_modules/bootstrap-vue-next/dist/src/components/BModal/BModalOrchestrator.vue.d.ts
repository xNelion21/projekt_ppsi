import { ComponentPublicInstance } from 'vue';
declare const _default: import('vue').DefineComponent<import('../../types/CommonTypes').TeleporterProps, {
    modals: import('vue').Ref<Map<import('../..').ControllerKey, import('../..').ModalOrchestratorMapValue>>;
    _isOrchestratorInstalled: import('vue').Ref<boolean>;
    create: (obj: import('../..').OrchestratedModal, options?: import('../..').ModalOrchestratorCreateOptions) => import('../..').PromiseWithModal | import('../..').PromiseWithModalBoolean;
    show: (obj: import('../..').OrchestratedModal) => import('../..').PromiseWithModalBoolean;
    confirm: (obj: import('../..').OrchestratedModal) => import('../..').PromiseWithModalBoolean;
    hide: (trigger?: string, id?: import('../..').ControllerKey) => void;
    hideAll: (trigger?: string) => void;
    get: (id: import('../..').ControllerKey) => {
        modal: import('../..').ModalOrchestratorMapValue | undefined;
        show(): void;
        hide(trigger?: string): void;
    } | {
        modal: import('vue').ComponentInternalInstance;
        show(): void;
        hide(trigger?: string): void;
    } | null;
    current: () => {
        show(): void;
        hide(trigger?: string): void;
        modal: import('vue').ComputedRef<ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import('vue').ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}, {}, {}, string, import('vue').ComponentProvideOptions>, {}, {}, "", {}, any> | null | undefined>;
    } | null;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('../../types/CommonTypes').TeleporterProps> & Readonly<{}>, {
    teleportDisabled: boolean;
    teleportTo: string | import('vue').RendererElement | null;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
export default _default;
