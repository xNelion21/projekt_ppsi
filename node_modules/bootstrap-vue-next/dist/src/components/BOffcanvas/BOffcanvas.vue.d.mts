import { BOffcanvasProps } from '../../types/ComponentProps';
import { BOffcanvasSlots } from '../../types/ComponentSlots';
type __VLS_Props = Omit<BOffcanvasProps, 'modelValue'>;
type __VLS_PublicProps = {
    modelValue?: Exclude<BOffcanvasProps['modelValue'], undefined>;
} & __VLS_Props;
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: Readonly<BOffcanvasSlots> & BOffcanvasSlots;
    refs: {
        _element: HTMLDivElement;
        _close: import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('../..').BCloseButtonProps> & Readonly<{
            onClick?: ((value: MouseEvent) => any) | undefined;
        }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
            click: (value: MouseEvent) => any;
        }, import('vue').PublicProps, {
            disabled: boolean;
            type: import('../..').ButtonType;
            ariaLabel: string;
        }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, HTMLButtonElement, import('vue').ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<import('../..').BCloseButtonProps> & Readonly<{
            onClick?: ((value: MouseEvent) => any) | undefined;
        }>, {}, {}, {}, {}, {
            disabled: boolean;
            type: import('../..').ButtonType;
            ariaLabel: string;
        }> | null;
        _fallbackFocusElement: HTMLDivElement;
    };
    rootEl: any;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<__VLS_PublicProps, {
    hide: (trigger?: string, noTriggerEmit?: boolean) => Promise<string>;
    show: (resolveOnHide?: boolean) => Promise<boolean | string>;
    toggle: (resolveOnHide?: boolean) => Promise<boolean | string>;
    isOpenByBreakpoint: import('vue').Ref<boolean, boolean>;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    close: (value: import('../..').BvTriggerableEvent) => any;
    show: (value: import('../..').BvTriggerableEvent) => any;
    hidden: (value: import('../..').BvTriggerableEvent) => any;
    "update:modelValue": (value: boolean) => any;
    toggle: (value: import('../..').BvTriggerableEvent) => any;
    "show-prevented": (value: import('../..').BvTriggerableEvent) => any;
    hide: (value: import('../..').BvTriggerableEvent) => any;
    backdrop: (value: import('../..').BvTriggerableEvent) => any;
    esc: (value: import('../..').BvTriggerableEvent) => any;
    "hide-prevented": (value: import('../..').BvTriggerableEvent) => any;
    "toggle-prevented": (value: import('../..').BvTriggerableEvent) => any;
    shown: (value: import('../..').BvTriggerableEvent) => any;
    breakpoint: (value: import('../..').BvTriggerableEvent, opened: boolean) => any;
}, string, import('vue').PublicProps, Readonly<__VLS_PublicProps> & Readonly<{
    onClose?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    onShow?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    onHidden?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
    onToggle?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    "onShow-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    onHide?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    onBackdrop?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    onEsc?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    "onHide-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    "onToggle-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    onShown?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    onBreakpoint?: ((value: import('../..').BvTriggerableEvent, opened: boolean) => any) | undefined;
}>, {
    id: string;
    noBackdrop: boolean;
    backdropFirst: boolean;
    bodyAttrs: Readonly<import('../../types/AnyValuedAttributes').AttrsValue>;
    bodyClass: import('../../types/AnyValuedAttributes').ClassValue;
    bodyScrolling: boolean;
    focus: "close" | boolean | string | Readonly<import('vue').ComponentPublicInstance> | Readonly<HTMLElement> | null;
    footerClass: string;
    headerClass: string;
    headerCloseClass: import('../../types/AnyValuedAttributes').ClassValue;
    headerCloseLabel: string;
    headerCloseVariant: import('../..').ButtonVariant | null;
    noCloseOnBackdrop: boolean;
    noCloseOnEsc: boolean;
    noHeader: boolean;
    noTrap: boolean;
    noHeaderClose: boolean;
    placement: import('../..').Placement;
    shadow: import('../..').Size | boolean;
    title: string;
    width: string;
    teleportDisabled: boolean;
    teleportTo: string | import('vue').RendererElement | null;
    show: boolean;
    lazy: boolean;
    initialAnimation: boolean;
    noAnimation: boolean;
    unmountLazy: boolean;
    visible: boolean;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {
    _element: HTMLDivElement;
    _close: import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('../..').BCloseButtonProps> & Readonly<{
        onClick?: ((value: MouseEvent) => any) | undefined;
    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        click: (value: MouseEvent) => any;
    }, import('vue').PublicProps, {
        disabled: boolean;
        type: import('../..').ButtonType;
        ariaLabel: string;
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, HTMLButtonElement, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('../..').BCloseButtonProps> & Readonly<{
        onClick?: ((value: MouseEvent) => any) | undefined;
    }>, {}, {}, {}, {}, {
        disabled: boolean;
        type: import('../..').ButtonType;
        ariaLabel: string;
    }> | null;
    _fallbackFocusElement: HTMLDivElement;
}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
